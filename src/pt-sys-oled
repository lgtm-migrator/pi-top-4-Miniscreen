#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from signal import (
    signal,
    SIGINT,
    SIGTERM
)
from logging import (
    basicConfig,
    getLogger,
    DEBUG,
    ERROR
)
from argparse import ArgumentParser
from luma.core.error import DeviceNotFoundError
from os import path
from time import sleep

from pitopcommon.logger import PTLogger
from pitopcommon.command_runner import run_command
from pitopcommon.common_names import DeviceName

from pitop.system.devices import device_type
from pitop.miniscreen.oled import OLED

from components.widgets.common.functions import get_image_file
from components.MenuManager import MenuManager


# TODO: replace with check of file system size; remove patch from preinst
fs_expanded_breadcrumb = "/etc/pi-top/.expandedFs"
boot_animation_played_breadcrumb = "/tmp/.pt-sys-oled.boot-played"


def configure_logging():
    basicConfig(
        level=DEBUG,
        format='%(asctime)-15s - %(message)s'
    )
    # Ignore PIL debug messages
    getLogger('PIL').setLevel(ERROR)


def configure_interrupt_signals(app):
    def signal_handler(signal, frame):
        PTLogger.debug("Stopping...")
        app.stop()
        PTLogger.debug("Stopped!")
    signal(SIGINT, signal_handler)
    signal(SIGTERM, signal_handler)


def should_run():
    try:
        return device_type() == DeviceName.pi_top_4.value
    except Exception:
        PTLogger.info(
            "Could not determine pi-top hub type from pt-device-manager. Exiting...")

    PTLogger.info("Not running on a pi-top [4]. Exiting...")
    return False


def enable_sp1_dtoverlay_if_required():
    if not path.exists("/dev/spidev1.0"):
        run_command("dtoverlay spi1-1cs", timeout=5)
        sleep(1)


def get_parser():
    parser = ArgumentParser(description="pi-top OLED sys menu")
    parser.add_argument(
        "--log-level",
        type=int,
        help="set the logging level from 10 (more verbose) to 50 (less verbose)",
        default=20,
    )
    return parser


def main():
    try:
        args = get_parser().parse_args()

        configure_logging()
        PTLogger.setup_logging(logger_name="pt-sys-oled",
                               logging_level=args.log_level,
                               log_to_journal=False)

        if should_run():
            enable_sp1_dtoverlay_if_required()

            device_found = False
            try:
                oled = OLED()
                device_found = True
            except DeviceNotFoundError as e:
                PTLogger.error(f"Error getting device: {str(e)}")

            # If device is not found, exit normally to avoid restarting the service repeatedly
            if not device_found:
                return

            oled._set_exclusive_mode(False)
            oled.reset()

            played_boot_animation = path.exists(
                boot_animation_played_breadcrumb)
            if not played_boot_animation:
                oled.play_animated_image_file(
                    get_image_file("startup/pi-top_startup.gif"))

            app = MenuManager(oled)
            configure_interrupt_signals(app)
            app.main_loop()
            app.stop()

    except KeyboardInterrupt:
        pass


if __name__ == "__main__":
    main()
